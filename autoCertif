#!/bin/bash

#              USAGE:
#      chmod +x ./autoCertif
#      sudo ./autoCertif
#      sudo ./autoCertif clean
#      sudo ./autoCertif init
#      sudo ./autoCertif --help

################## DECLARE FUNCTIONS ######################

checkRoot() {
   if [ $(id -u) -ne 0 ]; then
     printf "Script must be run as root. Try 'sudo ./autoCertif'\n"
     exit 1
   fi
}

checkNeededPackages() {
   lst="expect openssl apache2"
   for items in $lst
   do
     type -P $items &>/dev/null || {
       echo -en "\n Package \"$items\" is not installed!"
       echo -en "\n Install now? y/n: "
       read ops
       case $ops in
           [Yy]* ) sudo apt-get install $items ;;
           	     *)  echo -e "\n Exiting..."
               		break;;
                    #exit 1 ;;
       esac
     }
   done
}

informationCorrect() {
    printf "\n\n"
    echo "Country name = "$countryName
    echo "State or province name = "$stateOrProvinceName
    echo "Locality name = "$localityName
    echo "Organization name = "$organizationName
    echo "Organizational Unit Name = "$organizationUnitName
    echo "Common name = "$commonName
    echo "Email Address = "$email

    while true; do
        printf "\n\n"
        read -p "Are these informations correct ? y/n " yn
        case $yn in
            [Yy]* ) break;;
            [Nn]* ) printf "Please edit certificat.cfg to match expected informations\n"; exit 0;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

readConfigFile() {
    fichier=$(cat certificat.cfg)
    fichier=$(echo $fichier | tr ' ' '=');
    countryName=$(echo $fichier | awk -F '=' '{print $2}')
    stateOrProvinceName=$(echo $fichier | awk -F '=' '{print $4}')
    localityName=$(echo $fichier | awk -F '=' '{print $6}')
    organizationName=$(echo $fichier | awk -F '=' '{print $8}')
    organizationUnitName=$(echo $fichier | awk -F '=' '{print $10}')
    commonName=$(echo $fichier | awk -F '=' '{print $12}')
    email=$(echo $fichier | awk -F '=' '{print $14}')
    informationCorrect
}

informationQuerry() {
    read -s -p "PEM pass phrase (4-20 length) =  " PEMpassword
    changeInfo
}

changeInfo() {
    sed -i 's/dir		= .\/demoCA/dir		= .\/CA/g' CA/ca.cnf
    sed -i 's/countryName_default		= AU/countryName_default		= '$countryName'/g' CA/ca.cnf
    sed -i 's/tateOrProvinceName_default	= Some-State/tateOrProvinceName_default	= '$stateOrProvinceName'/g' CA/ca.cnf
    sed -i 's/0.organizationName_default	= Internet Widgits Pty Ltd/0.organizationName_default	= '$organizationName'/g' CA/ca.cnf
    sed -i 's/#organizationalUnitName_default	=/organizationalUnitName_default	= '$organizationUnitName'/g' CA/ca.cnf
    printf "Config file: updated\n"
}

editConfigFile() {
    if touch certificat.cfg && echo -e "countryName=\nStateOrProvinceName=\nlocalityName=\norganizationName=\norganizationUnitName=\ncommonName=\nemail=" > certificat.cfg; then
        printf "certificat.cfg has been initialised and is ready to be modified\n" 
    fi
}

######################## GO ###############################

checkRoot

if [ "$#" -gt 1 ]; then
    printf "Illegal number of parameters\n"
    exit 2;
elif [ "$1" = "--help" ]; then 
    printf "\n Program must be run as sudo\n"
    printf " It is mandatory to complete certificat.cfg\n"
    printf " Config file openssl.cnf is also needed to run the program\n"
    printf " Try 'sudo ./autoCertif' to create self-signed certificates,\n"
    printf " an pre-built architechture to store the generated files\n"
    printf " and to configure apache2 files\n"
    printf " Try 'sudo ./autoCertif clean' to flush the architechture\n"
    printf " Try 'sudo ./autoCertif init' to initialize the config file\n"
    printf "\n"
    exit 0;
elif [ "$1" = "clean" ]; then
    if rm -R --force CA; then
        printf "Architecture: cleaned\n"
    else sudo rm -R CA
        printf "Architecture: cleaned\n"
    fi
    exit 0;
elif [ "$1" = "init" ]; then
    editConfigFile
    exit 0;
elif [ "$#" -eq 1 ]; then
    printf "Illegal argument, try './autoCertif --help'\n"
    exit 1;
fi

checkNeededPackages

readConfigFile

informationQuerry

mkdir CA && mkdir CA/newcerts && mkdir CA/certrequests && mkdir CA/private
echo "01" > CA/serial && touch CA/index.txt && echo "Architecture: done"
cp openssl.cnf CA/ca.cnf

changeInfo 

/usr/bin/expect <<EOD
spawn sudo openssl req -new -x509 -extensions v3_ca -newkey rsa:4096 -keyout CA/private/cakey.pem -out CA/cacert.pem -config CA/ca.cnf
expect {Enter PEM pass phrase:} {send "${PEMpassword}\n"}
expect {Verifying - Enter PEM pass phrase:} {send "${PEMpassword}\n"}
expect -re {Country Name \(2 letter code\) [^:]*:} {send ".\n"}
expect -re {State or Province Name \(full name\) [^:]*:} {send ".\n"}
expect -re {Locality Name \(eg, city\) [^:]*:} {send "${localityName}\n"}
expect -re {Organization Name \(eg, company\) [^:]*:} {send ".\n"}
expect -re {Organizational Unit Name \(eg, section\) [^:]*:} {send ".\n"}
expect -re {Common Name \(e.g. server FQDN or YOUR name\) [^:]*:} {send "${commonName}\n"}
expect -re {Email Address [^:]*:} {send "${email}\n"}
expect eof
EOD

printf "\n\nCertificate and private key succesfully created\n\n"

/usr/bin/expect <<EOD
spawn sudo openssl req -new -nodes -newkey rsa:2048 -keyout CA/private/webserver.key -out CA/certrequests/webserver.csr -config CA/ca.cnf
expect -re {Country Name \(2 letter code\) [^:]*:} {send ".\n"}
expect -re {State or Province Name \(full name\) [^:]*:} {send ".\n"}
expect -re {Locality Name \(eg, city\) [^:]*:} {send "${localityName}\n"}
expect -re {Organization Name \(eg, company\) [^:]*:} {send ".\n"}
expect -re {Organizational Unit Name \(eg, section\) [^:]*:} {send ".\n"}
expect -re {Common Name \(e.g. server FQDN or YOUR name\) [^:]*:} {send "${commonName}\n"}
expect -re {Email Address [^:]*:} {send "${email}\n"}
expect -re {A challenge password [^:]*:} {send "${PEMpassword}\n"}
expect -re {An optional company name [^:]*:} {send "\n"}
expect eof
EOD

printf "\n\nCertificate Signing Request successfully created\n\n"

/usr/bin/expect <<EOD
spawn sudo openssl ca -config CA/ca.cnf -policy policy_anything -out CA/newcerts/webserver.cert -infiles CA/certrequests/webserver.csr
expect {Enter pass phrase for ./CA/private/cakey.pem:} {send "${PEMpassword}\n"}
expect -re {Sign the certificate\? [^:]*:} {send "y\n"}
expect -re {1 out of 1 certificate requests certified, commit\? [^:]*} {send "y\n"}
expect eof
EOD

printf "\n\nCertificate succesfully signed\n\n"

#openssl x509 -in CA/newcerts/webserver.cert -noout -text

sudo openssl verify -CAfile CA/cacert.pem CA/newcerts/webserver.cert

if mkdir -p /opt/apache2/ssl && cp CA/private/webserver.key /opt/apache2/ssl/ && cp CA/newcerts/webserver.cert /opt/apache2/ssl/; then
    printf "Files succesfully added to apache2\n"
fi

sed -i 's/#LoadModule ssl_module modules\/mod_ssl.so/LoadModule ssl_module modules\/mod_ssl.so/g' /usr/local/etc/httpd/httpd.conf

if sudo apachectl stop && sudo apachectl start; then
    printf "\n\napache2 has been restarted and is ready for use\n"
fi